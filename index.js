const bb = require('bot-brother');
const bot = bb({
    key: process.env.BOT_KEY,
    sessionManager: bb.sessionManager.memory(),
    // webHook: {},
    polling: { interval: 0, timeout: 3 }
});

bot.use('before', bb.middlewares.typing());
process.env.BOTANIO_KEY && bot.use('before', bb.middlewares.botanio(process.env.BOTANIO_KEY));

const fingers = ['üñï', 'üññ', '‚òù', 'üëÜ', 'üñêÔ∏è', 'üëå', '‚úå', 'üëç', 'üëà', 'üëâ', 'üëá', '‚òùÔ∏è'];

const triggerQuestions = [
    '–°–º–æ—Ç—Ä–∏—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ!',
    '–ó–¥–µ—Å—å –≥–ª–∞–≤–Ω–æ–µ ‚Äî –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.',
    '–≠—Ç–æ –∏–≥—Ä–∞ –Ω–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!'
];

const questions = [
    '–ù–µ –ø–µ—Ä–µ–ø—É—Ç–∞–π—Ç–µ!',
    '–ü–æ–¥—É–º–∞–π—Ç–µ!',
    '–ù–µ –æ—à–∏–±–∏—Ç–µ—Å—å!',
    '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å!',
    '–ù–µ –ø—Ä–æ–≥–∞–¥–∞–π—Ç–µ!'
];

const triggerNoAnswers = [
    '–í—ã –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–º–æ—Ç—Ä–µ–ª–∏!',
    '–ë—É–¥—å—Ç–µ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ!',
    '–í–∞–º —Å—Ç–æ–∏—Ç –±—ã—Ç—å –ø–æ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ!',
    '–ù–µ—Ç. –≠—Ç–æ –∏–≥—Ä–∞ –Ω–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!',
    '–£–≤—ã... –ß—É—Ç—å –±–æ–ª—å—à–µ –≤–Ω–∏–º–∞–Ω–∏—è –∏ –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è.',
    '–ü—Ä–æ–º–∞—Ö! –í–Ω–∏–º–∞–Ω–∏–µ –∏ –µ—â–µ —Ä–∞–∑ –≤–Ω–∏–º–∞–Ω–∏–µ!',
    '–ù–µ –≤ —ç—Ç–æ—Ç —Ä–∞–∑. –¢–æ–ª—å–∫–æ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å.'
];

const noAnswers = [
    '–ú–∏–º–æ. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å!',
    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!',
    '–ù–µ –ø–æ–≤–µ–∑–ª–æ...',
    '–£–≤—ã...',
    '–ù–µ —Ç–æ –ø–∞–ª—å—Ç–æ',
    '–ê –≤–æ—Ç –∏ –Ω–µ—Ç!',
    '–ü—Ä–æ–º–∞—Ö!',
    '–°—Ç–æ–∏–ª–æ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –æ—Ç–≤–µ—Ç',
    '–î–∞, –∫–∞–∑–∞–ª–æ—Å—å –±—ã, –Ω–æ –Ω–µ—Ç :(',
    '–õ–û–õ! –ù–µ—Ç, –∫–æ–Ω–µ—á–Ω–æ',
    '–ê—Ö–∞—Ö–∞—Ö–∞! –ù–µ—Ç.',
    '–ü—Ñ—Ñ—Ñ! –ù–µ—Ç.',
    '–î—É–º–∞–π –ª—É—á—à–µ!'
];

const triggerYesAnswers = [
    '–í–µ—Ä–Ω–æ! –í—ã –±—ã–ª–∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã!',
    '–ü—Ä–∞–≤–∏–ª—å–Ω–æ, –≤–æ—Ç —á—Ç–æ –∑–Ω–∞—á–∏—Ç –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!',
    '–í–æ—Ç, —Å—Ç–æ–∏–ª–æ –ª–∏—à—å —á—É—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É—Ä–∞!',
    '–í–µ—Ä–Ω–æ! –≠—Ç–æ –∏–≥—Ä–∞ –Ω–∞ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å!'
];

const yesAnswers = [
    '–¢–æ—á–Ω—è–∫!',
    '–í —Ç–æ—á–∫—É!',
    '–î–∞!',
    '–ò–º–µ–Ω–Ω–æ!',
    '–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –≤–µ—Ä–Ω–æ!',
    '–î–∞! –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!',
    '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!',
    '–ù–∞ —ç—Ç–æ—Ç —Ä–∞–∑ –≤–µ—Ä–Ω–æ. –°—ã–≥—Ä–∞–µ—Ç–µ –µ—â–µ?',
    '–î–∞! –î–∞! –î–∞!',
    '–ü—Ä–∞–≤–∏–ª—å–Ω–æ! –í–∞–º —Å–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ø–æ–≤–µ–∑–ª–æ –∏–ª–∏ –≤—ã –¥–æ–≥–∞–¥–∞–ª–∏—Å—å?',
    '–ö–æ–Ω–µ—á–Ω–æ!',
    '–°–æ–≥–ª–∞—Å–µ–Ω!',
    '–î–∞ –∏ –µ—â–µ —Ä–∞–∑ –¥–∞!',
    '–ê–±—Å–æ–ª—é—Ç–Ω–æ –≤–µ—Ä–Ω–æ',
    '–ò–º–µ–Ω–Ω–æ —Ç–∞–∫!',
    '–ê–π, –º–æ–ª–æ–¥—Ü–∞!'
];

const finalParts = [
    '–ê —ç—Ç–æ',
    '–¢–æ–≥–¥–∞ —ç—Ç–æ',
    '–ö–∞–∫ –Ω–∞ —Å—á–µ—Ç —ç—Ç–æ–≥–æ',
    '–≠—Ç–æ'
];

const fingerWords = [
    '–ø–∞–ª–µ—Ü',
    '–ø–∞–ª—å—á–∏–∫'
];

function getRandomInt(min, max) {
    return Math.floor(Math.random() * (max - min)) + min;
}

function getRandom(collection) {
    return collection[getRandomInt(0, collection.length)];
}

const db = {};

bot.command('start')
    .invoke(function(ctx) {
        const chatId = ctx.meta.chat.id;
        const chat = db[chatId] || (db[chatId] = {});
        const isBefore = Math.random() > 0.4;
        let question = '';

        if (typeof chat.state === 'undefined' || chat.isFromStat) {
            const isFinger = Math.random() > 0.4;
            chat.state = isFinger;

            if (chat.isFromStat) {
                chat.isFromStat = false;
            } else {
                chat.users = {};
            }

            question = (isFinger ?
                getRandom(triggerQuestions) :
                getRandom(questions)) + '\n';
        }

        return ctx.sendMessage(
            (isBefore ? question : '') +
            getRandom(fingers) + ' ‚Äî ' + getRandom(fingerWords) + ',\n' +
            getRandom(fingers) + ' ‚Äî ' + getRandom(fingerWords) + ',\n' +
            getRandom(fingers) + ' ‚Äî ' + getRandom(fingerWords) + '.\n' +
            getRandom(finalParts) + ' ' + getRandom(fingers) + '?' +
            (isBefore ? '' : ('\n' + question))
        );
    })
    .keyboard([
        [{ '–ü–∞–ª–µ—Ü': { value: true } }],
        [{ '–ù–µ –ø–∞–ª–µ—Ü': { value: false } }]
    ])
    .answer(function(ctx) {
        ctx.hideKeyboard();

        const chatId = ctx.meta.chat.id;
        const username = ctx.meta.user.username;

        const isRight = db[chatId].state === ctx.answer;

        const isFinger = Math.random() > 0.55;
        db[chatId].state = isFinger;
        db[chatId].users[username] || (db[chatId].users[username] = {
            win: 0,
            fail: 0,
            sequence: 0
        });

        const user = db[chatId].users[username];
        if (isRight) {
            user.win += 1;
            user.sequence += 1;
        } else {
            user.fail += 1;
            user.sequence = 0;
        }

        const answer = isFinger ?
            getRandom(isRight ? triggerYesAnswers : triggerNoAnswers) :
            getRandom(isRight ? yesAnswers : noAnswers);

        return ctx
            .sendMessage(answer)
            .then(() => ctx.go('start'));
    });

bot.command('stat')
    .invoke(function(ctx) {
        const chatId = ctx.meta.chat.id;
        const users = db[chatId].users;

        if (!db[chatId].users) return;

        db[chatId].isFromStat = true;

        ctx.sendMessage(Object.keys(db[chatId].users).map(username => {
            const user = users[username];
            return '@' + username +
                '\n–ü–æ–±–µ–¥: ' + user.win + ' (–ø–æ–¥—Ä—è–¥: ' + user.sequence +
                ')\n–ü–æ—Ä–∞–∂–µ–Ω–∏–π: ' + user.fail;
        }).join('\n'));
    })
    .keyboard([
        [{ 'MOAR!': { go: 'start' } }]
    ]);
